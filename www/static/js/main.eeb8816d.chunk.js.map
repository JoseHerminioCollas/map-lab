{"version":3,"sources":["components/DatePicker/index.tsx","style/main-style.ts","components/GibsMap/index.tsx","components/OpenLayerMap/index.tsx","components/InfoModal/index.js","app-service.ts","components/Gibs/index.ts","command-items/info.js","command-items/info-with-action.js","components/GibsProductSelect/index.tsx","components/GibsProductInfo/index.tsx","components/App.tsx","index.tsx"],"names":["calendarButtonElement","style","mainContainer","display","flexDirection","fontFamily","background","position","top","left","right","bottom","& .info","& header","justifyContent","& header h1","color","margin","& header > div","flexGrow","& .map-frame","width","height","& .openlayer","& .gibs-map","& .gibs-select","overflow","alignContent","flexWrap","& .ms-Slider","minWidth","maxWidth","& .leaflet-map","& .google-map","& .bing-map","& .control-frame","& .control-frame h3","padding","& .control-frame button.ms-Button","GibsMap","_ref","id","appService","sourceOptions","mapElement","useRef","_useState","useState","_useState2","Object","slicedToArray","map","setMap","useEffect","OLMap","Map","target","current","layers","TileLayer","source","XYZ","view","View","projection","center","zoom","on","e","latLong","olProj","getView","getCenter","addCenterStatus","addCenterEventListener","lLConverted","setCenter","getLayers","getArray","setSource","react_default","a","createElement","ref","className","tabIndex","MapWrapper","initalFeaturesLayer","VectorLayer","VectorSource","xyz","url","attributions","theme","getTheme","contentStyles","mergeStyleSets","container","flexFlow","alignItems","fontSize","header","fonts","xLargePlus","flex","body","overflowY","selectors","p","p:first-child","marginTop","p:last-child","marginBottom","iconButtonStyles","root","palette","neutralPrimary","marginLeft","marginRight","rootHovered","neutralDark","cancelIcon","iconName","InfoModal","setIsModalOpen","isModalOpen","Modal","isOpen","onDismiss","isBlocking","containerClassName","dragOptions","IconButton","styles","iconProps","ariaLabel","onClick","href","initCenter","AppService","messages$","Subject","centers$","BehaviorSubject","zooms$","addMessageEventListener","listener","subArgs","message","console","log","subscribe","apply","addMessage","next","addZoomEventListener","idB","isValid","addZoom","getOLSourceOptions","date","gibsProduct","concat","gibsProducts","multibandImagery","description","imageLayer","dateRange","tileMatrixSets","format","info","key","text","iconOnly","infoWithAction","infoCommandItem","assign","DayPickerStrings","months","shortMonths","days","shortDays","goToToday","weekNumberFormatString","prevMonthAriaLabel","nextMonthAriaLabel","prevYearAriaLabel","nextYearAriaLabel","prevYearRangeAriaLabel","nextYearRangeAriaLabel","closeButtonAriaLabel","monthPickerHeaderAriaLabel","yearPickerHeaderAriaLabel","CalendarButtonExample","props","showCalendar","setShowCalendar","_useState3","_useState4","selectedDate","setSelectedDate","onDateSelect","_props$showMonthPicke","showMonthPickerAsOverlay","_props$isDayPickerVis","isDayPickerVisible","_props$isMonthPickerV","isMonthPickerVisible","_props$showGoToToday","showGoToToday","_props$buttonString","buttonString","highlightCurrentMonth","highlightSelectedMonth","calendarBtn","DefaultButton","toLocaleDateString","Callout","isBeakVisible","gapSpace","doNotLayer","directionalHint","DirectionalHint","bottomLeftEdge","setInitialFocus","FocusTrapZone","firstFocusableSelector","isClickableOutsideFocusTrap","Calendar","onSelectDate","toISOString","slice","value","firstDayOfWeek","DayOfWeek","Sunday","strings","maxDate","Date","minDate","productSelect","products","onProductSelect","items","forEach","product","item","push","subMenuProps","GibsProductSelect","CommandBar","GibsProductInfo","initializeIcons","jss","setup","preset","sheet","createStyleSheet","attach","applicationService","App","intiGibsProduct","setGibsProduct","_useState5","_useState6","gibsDate","setGibsDate","_useState7","_useState8","setSourceOptions","Fragment","classes","components_GibsMap","OpenLayerMap","src_components_GibsProductInfo","components_GibsProductSelect","DatePicker_CalendarButtonExample","components_InfoModal","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.eeb8816d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { DefaultButton } from '@fluentui/react/lib/Button'\nimport { Callout, DirectionalHint } from '@fluentui/react/lib/Callout'\nimport { Calendar, DayOfWeek } from '@fluentui/react/lib/Calendar'\nimport { FocusTrapZone } from '@fluentui/react/lib/FocusTrapZone'\n\nconst DayPickerStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  goToToday: 'Go to today',\n  weekNumberFormatString: 'Week number {0}',\n  prevMonthAriaLabel: 'Previous month',\n  nextMonthAriaLabel: 'Next month',\n  prevYearAriaLabel: 'Previous year',\n  nextYearAriaLabel: 'Next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close',\n  monthPickerHeaderAriaLabel: '{0}, select to change the year',\n  yearPickerHeaderAriaLabel: '{0}, select to change the month',\n}\n\nexport interface ICalendarButtonExampleProps {\n  onDateSelect: (date: string) => void;\n  isDayPickerVisible?: boolean;\n  isMonthPickerVisible?: boolean;\n  highlightCurrentMonth?: boolean;\n  highlightSelectedMonth?: boolean;\n  buttonString?: string;\n  showMonthPickerAsOverlay?: boolean;\n  showGoToToday?: boolean;\n}\n\nlet calendarButtonElement: HTMLElement\n\nexport const CalendarButtonExample: React.FunctionComponent<ICalendarButtonExampleProps> = (\n  props: ICalendarButtonExampleProps,\n) => {\n  const [showCalendar, setShowCalendar] = useState<boolean>(false)\n  const [selectedDate, setSelectedDate] = useState<Date>()\n\n  const {\n    onDateSelect,\n    showMonthPickerAsOverlay = false,\n    isDayPickerVisible = true,\n    isMonthPickerVisible = true,\n    showGoToToday = true,\n    buttonString = 'Click for Calendar',\n    highlightCurrentMonth,\n    highlightSelectedMonth,\n  } = props\n  const onUserDateSelect = (date: Date): void => {\n    setShowCalendar(false)\n    setSelectedDate(date)\n    onDateSelect(date.toISOString().slice(0, 10))\n  }\n\n  return (\n    <div>\n      <div ref={calendarBtn => {\n        if (calendarBtn) calendarButtonElement = calendarBtn\n      }}\n      >\n        <DefaultButton\n          onClick={() => setShowCalendar(true)}\n          text={!selectedDate ? buttonString : selectedDate.toLocaleDateString()}\n        />\n      </div>\n      {showCalendar && (\n        <Callout\n          isBeakVisible={false}\n          className=\"ms-DatePicker-callout\"\n          gapSpace={0}\n          doNotLayer={false}\n          target={calendarButtonElement}\n          directionalHint={DirectionalHint.bottomLeftEdge}\n          onDismiss={() => setShowCalendar(false)}\n          setInitialFocus\n        >\n          <FocusTrapZone firstFocusableSelector=\"ms-DatePicker-day--today\" isClickableOutsideFocusTrap>\n            <Calendar\n              onSelectDate={onUserDateSelect}\n              onDismiss={() => setShowCalendar(false)}\n              isMonthPickerVisible={isMonthPickerVisible}\n              value={selectedDate!}\n              firstDayOfWeek={DayOfWeek.Sunday}\n              strings={DayPickerStrings}\n              isDayPickerVisible={isDayPickerVisible}\n              highlightCurrentMonth={highlightCurrentMonth}\n              highlightSelectedMonth={highlightSelectedMonth}\n              showMonthPickerAsOverlay={showMonthPickerAsOverlay}\n              showGoToToday={showGoToToday}\n              maxDate={new Date()}\n              minDate={new Date(2003, 0, 1)}\n            />\n          </FocusTrapZone>\n        </Callout>\n      )}\n    </div>\n  )\n}\n","const style: any = {\n  mainContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    fontFamily: 'sans-serif',\n    background: 'gray',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    '& .info': {\n      position: 'absolute',\n    },\n    '& header': {\n      display: 'flex',\n      justifyContent: 'center',\n      background: 'white',\n    },\n    '& header h1': {\n      color: 'gray',\n      margin: '6px 12px',\n    },\n    '& header > div': {\n      flexGrow: 1,\n    },\n    '& .map-frame': {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n    },\n    '& .openlayer': {\n      position: 'relative',\n      width: '20%',\n      height: '90%',\n    },\n    '& .gibs-map': {\n      position: 'relative',\n      width: '80%',\n      height: '90%',\n    },\n    '& .gibs-select': {\n      overflow: 'auto',\n      background: '#fff',\n      display: 'flex',\n      justifyContent: 'space-around',\n      alignContent: 'center',\n      flexWrap: 'wrap',\n      color: 'gray',\n    },\n    '& .ms-Slider': {\n      minWidth: '250px',\n      maxWidth: '600px',\n    },\n    '& .leaflet-map': {\n      width: '100%',\n      height: '100%',\n    },\n    '& .google-map': {\n      width: '100%',\n      height: '100%',\n    },\n    '& .bing-map': {\n      width: '100%',\n    },\n    '& .control-frame': {\n      position: 'absolute',\n      bottom: 0,\n      overflow: 'auto',\n      background: '#fff',\n      width: '100%',\n      height: '10%',\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexWrap: 'wrap',\n      color: 'gray',\n    },\n    '& .control-frame h3': {\n      color: 'black',\n      padding: 0,\n      margin: '3px',\n    },\n    '& .control-frame button.ms-Button': {\n      color: 'gray',\n      padding: 0,\n      margin: '3px',\n    },\n  },\n}\nexport default style\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\nimport * as olProj from 'ol/proj'\nimport { AppServiceInstanceI } from '../../app-service'\n\nconst GibsMap: GibsNasa.GibsMap = ({\n  id,\n  appService,\n  sourceOptions,\n}: {\n  id: number, appService: AppServiceInstanceI, sourceOptions: any\n}) => {\n  const mapElement: any = useRef()\n  const addCenter = (center: any) => {\n    appService.addCenterStatus(center, id)\n  }\n  const [map, setMap]: any = useState()\n  useEffect(() => {\n    const OLMap: any = new Map({\n      target: mapElement.current,\n      layers: [\n        new TileLayer({\n          source: new XYZ(sourceOptions),\n        }),\n      ],\n      view: new View({\n        projection: 'EPSG:3857', // EPSG:3857 EPSG4326_250m EPSG:3857\n        center: [0, 0],\n        zoom: 6,\n      }),\n    }).on('pointerdrag', (e: any) => {\n      const latLong = olProj.toLonLat(e.map.getView().getCenter())\n      addCenter([latLong[1], latLong[0]])\n    })\n    // get the latest center value and update\n    appService.addCenterEventListener(center => {\n      if (OLMap) {\n        const lLConverted = olProj.fromLonLat([center[1], center[0]])\n        OLMap.target.getView().setCenter(lLConverted)\n      }\n    }, id)\n    setMap(OLMap)\n  }, [])\n  useEffect(() => {\n    if (map) {\n      const source = new XYZ(sourceOptions)\n      const ls = map.target.getLayers().getArray()\n      ls[0].setSource(source)\n    }\n  }, [sourceOptions])\n\n  return (\n    <div ref={mapElement} className=\"gibs-map\" tabIndex={-1} />\n  )\n}\n\nexport default GibsMap\n","import React, { useEffect, useRef } from 'react'\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport XYZ from 'ol/source/XYZ'\nimport * as olProj from 'ol/proj'\nimport { AppServiceInstanceI } from '../../app-service'\n\ninterface IMapWrapper {\n  (id: number, appService: AppServiceInstanceI): any\n}\n\nconst MapWrapper = ({ id, appService }: {\n  id: number,\n  appService: AppServiceInstanceI,\n}) => {\n  const mapElement: any = useRef()\n  const addCenter = (center: any) => {\n    appService.addCenterStatus(center, id)\n  }\n  useEffect(() => {\n    const initalFeaturesLayer = new VectorLayer({\n      source: new VectorSource(),\n    })\n    const xyz = new XYZ({\n      url: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}',\n      attributions: ['© OpenStreetMap -Mitwirkende, SRTM | Affichage de la carte: © OpenTopoMap (CC-BY-SA)'],\n    })\n    const map: any = new Map({\n      target: mapElement.current,\n      layers: [\n        new TileLayer({\n          source: xyz,\n        }),\n        initalFeaturesLayer,\n      ],\n      view: new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 6,\n      }),\n    }).on('pointerdrag', (e: any) => {\n      const latLong = olProj.toLonLat(e.map.getView().getCenter())\n      addCenter([latLong[1], latLong[0]])\n    })\n    appService.addCenterEventListener(center => {\n      if (map) {\n        const lLConverted = olProj.fromLonLat([center[1], center[0]])\n        map.target.getView().setCenter(lLConverted)\n      }\n    }, id)\n  }, [])\n\n  return (\n    <div ref={mapElement} className=\"openlayer\" tabIndex={-1} />\n  )\n}\n\nexport default MapWrapper\n","import {\n  IconButton,\n  Modal,\n  mergeStyleSets,\n  getTheme,\n} from '@fluentui/react'\nimport React from 'react'\n\nconst theme = getTheme()\nconst contentStyles = mergeStyleSets({\n  container: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    alignItems: 'stretch',\n    fontSize: '1.4em',\n    padding: '1em',\n  },\n  header: [\n    theme.fonts.xLargePlus,\n    {\n      flex: '1 1 auto',\n      display: 'flex',\n      alignItems: 'center',\n      padding: 0,\n    },\n  ],\n  body: {\n    flex: '4 4 auto',\n    padding: '0 24px 24px 24px',\n    overflowY: 'hidden',\n    selectors: {\n      p: { margin: '14px 0' },\n      'p:first-child': { marginTop: 0 },\n      'p:last-child': { marginBottom: 0 },\n    },\n  },\n})\nconst iconButtonStyles = {\n  root: {\n    color: theme.palette.neutralPrimary,\n    marginLeft: 'auto',\n    marginTop: '4px',\n    marginRight: '2px',\n  },\n  rootHovered: {\n    color: theme.palette.neutralDark,\n  },\n}\nconst cancelIcon = { iconName: 'Cancel' }\n\nconst InfoModal = ({ setIsModalOpen, isModalOpen }) => (\n  <Modal\n    // titleAriaId={titleId}\n    isOpen={isModalOpen}\n    onDismiss={() => setIsModalOpen(false)}\n    isBlocking={false}\n    containerClassName={contentStyles.container}\n    dragOptions={false}\n  >\n    <div className={contentStyles.header}>\n      <IconButton\n        styles={iconButtonStyles}\n        iconProps={cancelIcon}\n        ariaLabel=\"Close popup modal\"\n        onClick={() => setIsModalOpen(false)}\n      />\n    </div>\n    <h2>ViewGibs</h2>\n    <p>\n      A tool for viewing the Global Imagery Browse Services (GIBS).\n    </p>\n    <a href=\"https://wiki.earthdata.nasa.gov/pages/viewpage.action?pageId=2228230\">GIBS</a>\n    <p>\n      Designed and developed by\n      &nbsp;\n      <a href=\"https://goatstone.com\" target=\"new\">Goatstone</a>\n      &nbsp;\n      2021 &copy;\n    </p>\n  </Modal>\n)\n\nexport default InfoModal\n","import { Subject, BehaviorSubject } from 'rxjs'\n\nexport interface Message {\n  message: string;\n  id: number | null;\n}\ninterface AddMessageEventListener {\n  (listener: (message: string) => void, id: number): void;\n}\ninterface AddMessage {\n  (message: string, id: number | null): void;\n}\nexport interface AppServiceI {\n  (): {\n    addMessageEventListener: AddMessageEventListener;\n    addMessage: AddMessage;\n    addCenterEventListener: AddCenterEventListener;\n    addCenterStatus: AddCenterStatus;\n    addZoomEventListener: AddZoomEventListener;\n    addZoom: AddZoom;\n  }\n}\nexport interface AppServiceInstanceI {\n  addMessageEventListener: AddMessageEventListener;\n  addMessage: AddMessage;\n  addCenterEventListener: AddCenterEventListener;\n  addCenterStatus: AddCenterStatus;\n  addZoomEventListener: AddZoomEventListener;\n  addZoom: AddZoom;\n}\ninterface AddCenterEventListener {\n  (listener: (center: number[]) => void, id: number): void\n}\nexport interface Center {\n  center: number[]\n  id: number\n}\ninterface AddCenterStatus {\n  (center: number[], id: number): void\n}\ninterface Zoom {\n  zoom: number\n  id: number\n}\ninterface AddZoomEventListener {\n  (listener: (zoom: number) => void, id: number): void\n}\ninterface AddZoom {\n  (zoom: number, id: number): void\n}\nconst appServiceId = 0\nconst initZoom = 10\nconst initCenter = [26.96350124534564, -111.59884370576512]\nconst isValid = (id: number, idB: number) => id !== idB\nconst AppService: AppServiceI = () => {\n  const messages$: Subject<Message> = new Subject()\n  const centers$: BehaviorSubject<Center> = new BehaviorSubject(\n    { center: initCenter, id: appServiceId },\n  )\n  const zooms$: BehaviorSubject<Zoom> = new BehaviorSubject(\n    { zoom: initZoom, id: appServiceId },\n  )\n  const addMessage: AddMessage = (message, id) => {\n    messages$.next({ message, id })\n  }\n  const addMessageEventListener: AddMessageEventListener = (listener, id) => {\n    const subArgs = [\n      (message: Message) => {\n        listener(message.message)\n      },\n      // eslint-disable-next-line no-console\n      console.log,\n      () => { // eslint-disable-next-line no-console\n        console.log('Completed: ', id)\n      }]\n    messages$.subscribe(...subArgs)\n  }\n  const addCenterEventListener: AddCenterEventListener = (listener, id) => {\n    centers$.subscribe((center: Center) => {\n      // do not send the center event to the caller\n      if (center.id !== id) {\n        listener(center.center)\n      }\n    },\n    // eslint-disable-next-line no-console\n    console.log,\n    () => {\n      // eslint-disable-next-line no-console\n      console.log('Completed: ', id)\n    })\n  }\n  const addCenterStatus: AddCenterStatus = (center, id) => {\n    centers$.next({ center, id })\n  }\n  const addZoomEventListener: AddZoomEventListener = (listener, id) => {\n    zooms$.subscribe((zoom: Zoom) => {\n      if (isValid(id, zoom.id)) {\n        listener(zoom.zoom)\n      }\n    })\n  }\n  const addZoom: AddZoom = (zoom, id) => zooms$.next({ zoom, id })\n  return {\n    addMessageEventListener,\n    addMessage,\n    addCenterEventListener,\n    addCenterStatus,\n    addZoomEventListener,\n    addZoom,\n  }\n}\n\nexport default AppService\n","// Information about Gibs Nasa can be found here:\n// https://wiki.earthdata.nasa.gov/display/GIBS/GIBS+Available+Imagery+Products#expand-CorrectedReflectance17Products\n\nconst gibsProducts: GibsNasa.Products = {\n  multibandImagery: [{\n    description: 'Corrected Reflectance (True Color)',\n    imageLayer: 'MODIS_Terra_CorrectedReflectance_TrueColor',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  {\n    description: 'Corrected Reflectance ',\n    imageLayer: 'VIIRS_SNPP_CorrectedReflectance_TrueColor',\n    dateRange: ['2020-04-25', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  {\n    description: 'Corrected Reflectance (Bands 3-6-7) ',\n    imageLayer: 'MODIS_Terra_CorrectedReflectance_Bands367',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  }, {\n    description: 'Corrected Reflectance (Bands 7-2-1) ',\n    imageLayer: 'MODIS_Aqua_CorrectedReflectance_Bands721',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  {\n    description: 'Corrected Reflectance (Bands 7-2-1) ',\n    imageLayer: 'MODIS_Terra_CorrectedReflectance_Bands367',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  ],\n}\nconst getOLSourceOptions = (date: string, gibsProduct: string) => {\n  const sO = {\n    url: `\nhttps://gibs-{a-c}.earthdata.nasa.gov/wmts/epsg3857/best/\n${gibsProduct}/default/\n${date}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg`,\n    attributions:\n      ['Global Imagery Browse Services <a href=\"https://wiki.earthdata.nasa.gov/pages/viewpage.action?pageId=2228230\" >(GIBS)</a>'],\n  }\n  return sO\n}\nexport { getOLSourceOptions }\nexport default gibsProducts\n","\nexport default {\n  key: 'info',\n  text: 'Info',\n  // This needs an ariaLabel since it's icon-only\n  ariaLabel: 'Info',\n  iconOnly: true,\n  iconProps: { iconName: 'Info' },\n}\n","// commandItem onClickAction () => {}\n// add an onClick porrop to command Item\nconst infoWithAction = (infoCommandItem, setIsModalOpen) => {\n  Object.assign(\n    infoCommandItem,\n    {\n      onClick: () => setIsModalOpen(true),\n    },\n  )\n}\n\nexport default infoWithAction\n","import React from 'react'\nimport { CommandBar, ICommandBarItemProps } from '@fluentui/react'\n\ninterface IProductSelect {\n  (products: GibsNasa.Products, onProductSelect: GibsNasa.OnProductSelect): ICommandBarItemProps\n}\nconst productSelect: IProductSelect = (products, onProductSelect) => {\n  const items: ICommandBarItemProps[] = []\n  products.multibandImagery.forEach(product => {\n    const item = {\n      key: product.imageLayer,\n      text: product.description,\n      onClick: () => onProductSelect(product),\n    }\n    items.push(item)\n  })\n\n  return {\n    key: 'gibs-products',\n    text: 'Gibs Products',\n    iconProps: { iconName: 'ProductList' },\n    subMenuProps: {\n      items,\n    },\n  }\n}\n\nconst GibsProductSelect: GibsNasa.GibsProductSelect = ({ products, onProductSelect }) => (\n  <section className=\"gibs-product-select\">\n    <CommandBar\n      items={[productSelect(products, onProductSelect)]}\n    />\n  </section>\n)\n\nexport default GibsProductSelect\n","import React from 'react'\nimport './index.css'\n\nconst GibsProductInfo: GibsNasa.GibsProductInfo = ({ product, date }) => (\n  <section className=\"gibs-product-info\">\n    <h5>\n      {product.description}\n    </h5>\n    <ul>\n      <li>\n        <span>\n          Date\n        </span>\n        {date}\n      </li>\n      <li>\n        <span>\n          Date Range\n        </span>\n        {product.dateRange}\n      </li>\n    </ul>\n  </section>\n)\n\nexport default GibsProductInfo\n","import React, {\n  useEffect,\n  useState,\n} from 'react'\nimport { CommandBar, initializeIcons } from '@fluentui/react'\nimport jss from 'jss'\nimport preset from 'jss-preset-default'\nimport style from '../style/main-style'\nimport GibsMap from './GibsMap'\nimport MapWrapper from './OpenLayerMap'\nimport InfoModal from './InfoModal'\nimport AppService, { AppServiceInstanceI } from '../app-service'\nimport gibsProducts, {\n  getOLSourceOptions,\n} from './Gibs'\nimport {\n  infoCommandItem,\n  infoWithAction,\n} from '../command-items'\nimport { CalendarButtonExample } from './DatePicker'\nimport GibsProductSelect from './GibsProductSelect'\nimport GibsProductInfo from './GibsProductInfo'\n\ninitializeIcons()\njss.setup(preset())\nconst sheet = jss.createStyleSheet(style)\nsheet.attach()\nconst applicationService: AppServiceInstanceI = AppService()\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  infoWithAction(infoCommandItem, setIsModalOpen)\n  const intiGibsProduct: GibsNasa.Product = gibsProducts.multibandImagery[0]\n  const [gibsProduct, setGibsProduct] = useState<GibsNasa.Product>(intiGibsProduct)\n  const [gibsDate, setGibsDate] = useState<string>(intiGibsProduct.dateRange[0])\n  const [\n    sourceOptions,\n    setSourceOptions] = useState(getOLSourceOptions(gibsDate, intiGibsProduct.imageLayer))\n  useEffect(() => {\n    setSourceOptions(getOLSourceOptions(gibsDate, gibsProduct.imageLayer))\n  }, [gibsProduct, gibsDate])\n\n  return (\n    <>\n      <section className={sheet.classes.mainContainer}>\n        <div className=\"map-frame\">\n          <GibsMap\n            id={10}\n            sourceOptions={sourceOptions}\n            appService={applicationService}\n          />\n          <MapWrapper\n            id={90}\n            appService={applicationService}\n          />\n        </div>\n        <div className=\"control-frame\">\n          <h3>ViewGibs</h3>\n          <GibsProductInfo\n            product={gibsProduct}\n            date={gibsDate}\n          />\n          <GibsProductSelect\n            products={gibsProducts}\n            onProductSelect={product => {\n              setGibsProduct(product)\n            }}\n          />\n          <CalendarButtonExample\n            onDateSelect={(date: string) => {\n              setGibsDate(date)\n            }}\n          />\n          <InfoModal\n            setIsModalOpen={setIsModalOpen}\n            isModalOpen={isModalOpen}\n          />\n          <CommandBar\n            items={[infoCommandItem]}\n            ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n          />\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}
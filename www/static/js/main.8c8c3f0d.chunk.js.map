{"version":3,"sources":["style/main-style.ts","components/Gibs/index.ts","components/GibsSelect/index.tsx","components/GibsMap/index.tsx","components/InfoModal/index.js","app-service.ts","command-items/info.js","command-items/info-with-action.js","components/App.tsx","index.tsx"],"names":["style","mainContainer","display","flexDirection","fontFamily","background","position","top","left","right","bottom","& .info","& header","justifyContent","& header h1","color","margin","& header > div","flexGrow","& .map-frame","width","height","& .openlayer","& .gibs-select","overflow","alignContent","flexWrap","& .ms-Slider","minWidth","maxWidth","& .leaflet-map","& .google-map","& .bing-map","& .control-frame","getOLSourceOptions","date","gibsProduct","url","concat","attributions","gibsProducts","multibandImagery","description","imageLayer","dateRange","tileMatrixSets","format","productSelect","setProduct","items","forEach","product","item","key","text","onClick","push","iconProps","iconName","subMenuProps","GibsSelect","_ref","selectGibsProduct","_useState","useState","_useState2","Object","slicedToArray","day","setDay","_useState3","_useState4","month","setMonth","_useState5","_useState6","year","setYear","_useState7","_useState8","useEffect","userSelectedDate","Date","dateFormatted","getFullYear","String","getMonth","padStart","getDate","react_default","a","createElement","className","CommandBar","Slider","label","min","max","value","showValue","onChange","dayValue","monthValue","yearValue","GibsMap","id","appService","sourceOptions","mapElement","useRef","map","setMap","OLMap","Map","target","current","layers","TileLayer","source","XYZ","view","View","projection","center","zoom","on","e","latLong","olProj","getView","getCenter","addCenterStatus","addCenterEventListener","lLConverted","setCenter","getLayers","getArray","setSource","ref","theme","getTheme","contentStyles","mergeStyleSets","container","flexFlow","alignItems","fontSize","padding","header","fonts","xLargePlus","flex","body","overflowY","selectors","p","p:first-child","marginTop","p:last-child","marginBottom","iconButtonStyles","root","palette","neutralPrimary","marginLeft","marginRight","rootHovered","neutralDark","cancelIcon","InfoModal","setIsModalOpen","isModalOpen","Modal","isOpen","onDismiss","isBlocking","containerClassName","dragOptions","IconButton","styles","ariaLabel","href","initCenter","AppService","messages$","Subject","centers$","BehaviorSubject","zooms$","addMessageEventListener","listener","subArgs","message","console","log","subscribe","apply","addMessage","next","addZoomEventListener","idB","isValid","addZoom","info","iconOnly","infoWithAction","infoCommandItem","assign","initializeIcons","jss","setup","preset","sheet","createStyleSheet","attach","applicationService","App","intiGibsProduct","setGibsProduct","gibsDate","setGibsDate","setSourceOptions","Fragment","classes","components_GibsMap","components_InfoModal","components_GibsSelect","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.8c8c3f0d.chunk.js","sourcesContent":["const style: any = {\n  mainContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    fontFamily: 'sans-serif',\n    background: 'gray',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    '& .info': {\n      position: 'absolute',\n    },\n    '& header': {\n      display: 'flex',\n      justifyContent: 'center',\n      background: 'white',\n    },\n    '& header h1': {\n      color: 'gray',\n      margin: '6px 12px',\n    },\n    '& header > div': {\n      flexGrow: 1,\n    },\n    '& .map-frame': {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n    },\n    '& .openlayer': {\n      position: 'absolute',\n      width: '100%',\n      height: '90%',\n\n    },\n    '& .gibs-select': {\n      overflow: 'auto',\n      background: '#fff',\n      display: 'flex',\n      justifyContent: 'space-around',\n      alignContent: 'center',\n      flexWrap: 'wrap',\n      color: 'gray',\n    },\n    '& .ms-Slider': {\n      minWidth: '250px',\n      maxWidth: '600px',\n    },\n    '& .leaflet-map': {\n      width: '100%',\n      height: '100%',\n    },\n    '& .google-map': {\n      width: '100%',\n      height: '100%',\n    },\n    '& .bing-map': {\n      width: '100%',\n    },\n    '& .control-frame': {\n      position: 'absolute',\n      bottom: 0,\n      overflow: 'auto',\n      background: '#fff',\n      width: '100%',\n      height: '10%',\n      display: 'flex',\n      justifyContent: 'space-around',\n      alignContent: 'center',\n      flexWrap: 'wrap',\n      color: 'gray',\n    },\n  },\n}\nexport default style\n","// Information about Gibs Nasa can be found here:\n// https://wiki.earthdata.nasa.gov/display/GIBS/GIBS+Available+Imagery+Products#expand-CorrectedReflectance17Products\n\nconst gibsProducts: GibsNasa.Products = {\n  multibandImagery: [{\n    description: 'Corrected Reflectance (True Color)',\n    imageLayer: 'MODIS_Terra_CorrectedReflectance_TrueColor',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  {\n    description: 'Corrected Reflectance ',\n    imageLayer: 'VIIRS_SNPP_CorrectedReflectance_TrueColor',\n    dateRange: ['2020-04-25', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  {\n    description: 'Corrected Reflectance (Bands 3-6-7) ',\n    imageLayer: 'MODIS_Terra_CorrectedReflectance_Bands367',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  }, {\n    description: 'Corrected Reflectance (Bands 7-2-1) ',\n    imageLayer: 'MODIS_Aqua_CorrectedReflectance_Bands721',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  {\n    description: 'Corrected Reflectance (Bands 7-2-1) ',\n    imageLayer: 'MODIS_Terra_CorrectedReflectance_Bands367',\n    dateRange: ['2003-01-01', 'present'],\n    tileMatrixSets: ['EPSG4326_250m'],\n    format: 'jpg',\n  },\n  ],\n}\nconst getOLSourceOptions = (date: string, gibsProduct: string) => {\n  const sO = {\n    url: `\nhttps://gibs-{a-c}.earthdata.nasa.gov/wmts/epsg3857/best/\n${gibsProduct}/default/\n${date}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg`,\n    attributions:\n      ['Global Imagery Browse Services <a href=\"https://wiki.earthdata.nasa.gov/pages/viewpage.action?pageId=2228230\" >(GIBS)</a>'],\n  }\n  return sO\n}\nexport { getOLSourceOptions }\nexport default gibsProducts\n","import React, { useEffect, useState } from 'react'\nimport { Slider, CommandBar, ICommandBarItemProps } from '@fluentui/react'\nimport gibsProducts from '../Gibs'\n\ninterface IProductSelect {\n  (setProduct: React.Dispatch<React.SetStateAction<string>>): ICommandBarItemProps\n}\n\nconst productSelect: IProductSelect = (setProduct: any) => {\n  const items: ICommandBarItemProps[] = []\n  gibsProducts.multibandImagery.forEach(product => {\n    const item: any = {\n      key: product.imageLayer,\n      text: product.description,\n      onClick: () => setProduct(product.imageLayer),\n    }\n    items.push(item)\n  })\n\n  return {\n    key: 'gibs-products',\n    text: 'Gibs Products',\n    iconProps: { iconName: 'ProductList' },\n    subMenuProps: {\n      items,\n    },\n  }\n}\n\nconst GibsSelect: GibsNasa.GibsSelectorComponent = ({\n  selectGibsProduct,\n}: { selectGibsProduct: GibsNasa.GibsSelectorCallback }) => {\n  const [day, setDay] = useState<number>(1)\n  const [month, setMonth] = useState<number>(7)\n  const [year, setYear] = useState<number>(2005)\n  const [product, setProduct] = useState<any>('MODIS_Terra_CorrectedReflectance_TrueColor')\n  useEffect(() => {\n    const gibsProduct: GibsNasa.Product = {\n      description: 'Corrected Reflectance (Bands 3-6-7) ',\n      imageLayer: product,\n      dateRange: ['2003-01-01', 'present'],\n      tileMatrixSets: ['EPSG4326_250m'],\n      format: 'jpg',\n    }\n    const userSelectedDate = new Date(year, (month - 1), day)\n    const dateFormatted = `${userSelectedDate\n      .getFullYear()}-${String(userSelectedDate\n      .getMonth() + 1).padStart(2, '0')}-${String(userSelectedDate\n      .getDate()).padStart(2, '0')}`\n    selectGibsProduct(gibsProduct, dateFormatted)\n  }, [year, month, day, product])\n\n  return (\n    <section className=\"gibs-select\">\n      <h3>ViewGibs</h3>\n      <CommandBar\n        items={[productSelect(setProduct)]}\n      />\n      <Slider\n        label=\"Day\"\n        min={1}\n        max={30}\n        value={day}\n        showValue\n        onChange={(dayValue: number) => setDay(dayValue)}\n      />\n      <Slider\n        label=\"Month\"\n        min={1}\n        max={12}\n        value={month}\n        showValue\n        onChange={(monthValue: number) => setMonth(monthValue)}\n      />\n      <Slider\n        label=\"Year\"\n        min={2003}\n        max={2020}\n        value={year}\n        showValue\n        onChange={(yearValue: number) => setYear(yearValue)}\n      />\n    </section>\n  )\n}\nexport default GibsSelect\n","import React, { useEffect, useRef, useState } from 'react'\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\nimport * as olProj from 'ol/proj'\nimport { AppServiceInstanceI } from '../../app-service'\n\nconst GibsMap: GibsNasa.GibsMap = ({\n  id,\n  appService,\n  sourceOptions,\n}: {\n  id: number, appService: AppServiceInstanceI, sourceOptions: any\n}) => {\n  const mapElement: any = useRef()\n  const addCenter = (center: any) => {\n    appService.addCenterStatus(center, id)\n  }\n  const [map, setMap]: any = useState()\n  useEffect(() => {\n    const OLMap: any = new Map({\n      target: mapElement.current,\n      layers: [\n        new TileLayer({\n          source: new XYZ(sourceOptions),\n        }),\n      ],\n      view: new View({\n        projection: 'EPSG:4326', // EPSG:3857 EPSG4326_250m\n        center: [0, 0],\n        zoom: 0,\n      }),\n    }).on('pointerdrag', (e: any) => {\n      const latLong = olProj.toLonLat(e.map.getView().getCenter())\n      addCenter([latLong[1], latLong[0]])\n    })\n    // get the latest center value and update\n    appService.addCenterEventListener(center => {\n      if (map) {\n        const lLConverted = olProj.fromLonLat([center[1], center[0]])\n        OLMap.target.getView().setCenter(lLConverted)\n      }\n    }, id)\n    setMap(OLMap)\n  }, [])\n  useEffect(() => {\n    if (map) {\n      const source = new XYZ(sourceOptions)\n      const ls = map.target.getLayers().getArray()\n      ls[0].setSource(source)\n    }\n  }, [sourceOptions])\n\n  return (\n    <div ref={mapElement} className=\"openlayer\" />\n  )\n}\n\nexport default GibsMap\n","import {\n  IconButton,\n  Modal,\n  mergeStyleSets,\n  getTheme,\n} from '@fluentui/react'\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst theme = getTheme()\nconst contentStyles = mergeStyleSets({\n  container: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    alignItems: 'stretch',\n    fontSize: '1.4em',\n    padding: '1em',\n  },\n  header: [\n    theme.fonts.xLargePlus,\n    {\n      flex: '1 1 auto',\n      display: 'flex',\n      alignItems: 'center',\n      padding: 0,\n    },\n  ],\n  body: {\n    flex: '4 4 auto',\n    padding: '0 24px 24px 24px',\n    overflowY: 'hidden',\n    selectors: {\n      p: { margin: '14px 0' },\n      'p:first-child': { marginTop: 0 },\n      'p:last-child': { marginBottom: 0 },\n    },\n  },\n})\nconst iconButtonStyles = {\n  root: {\n    color: theme.palette.neutralPrimary,\n    marginLeft: 'auto',\n    marginTop: '4px',\n    marginRight: '2px',\n  },\n  rootHovered: {\n    color: theme.palette.neutralDark,\n  },\n}\nconst cancelIcon = { iconName: 'Cancel' }\n\nconst InfoModal = ({ setIsModalOpen, isModalOpen }) => (\n  <Modal\n    // titleAriaId={titleId}\n    isOpen={isModalOpen}\n    onDismiss={() => setIsModalOpen(false)}\n    isBlocking={false}\n    containerClassName={contentStyles.container}\n    dragOptions={false}\n  >\n    <div className={contentStyles.header}>\n      <IconButton\n        styles={iconButtonStyles}\n        iconProps={cancelIcon}\n        ariaLabel=\"Close popup modal\"\n        onClick={() => setIsModalOpen(false)}\n      />\n    </div>\n    <h2>ViewGibs</h2>\n    <p>\n      A tool for viewing the Global Imagery Browse Services (GIBS).\n    </p>\n    <a href=\"https://wiki.earthdata.nasa.gov/pages/viewpage.action?pageId=2228230\">GIBS</a>\n    <p>\n      Designed and developed by\n      &nbsp;\n      <a href=\"https://goatstone.com\" target=\"new\">Goatstone</a>\n      &nbsp;\n      2021 &copy;\n    </p>\n  </Modal>\n)\n/* eslint-disable react/forbid-prop-types */\nInfoModal.propTypes = {\n  setIsModalOpen: PropTypes.func.isRequired,\n  isModalOpen: PropTypes.bool.isRequired,\n}\nexport default InfoModal\n","import { Subject, BehaviorSubject } from 'rxjs'\n\nexport interface Message {\n  message: string;\n  id: number | null;\n}\ninterface AddMessageEventListener {\n  (listener: (message: string) => void, id: number): void;\n}\ninterface AddMessage {\n  (message: string, id: number | null): void;\n}\nexport interface AppServiceI {\n  (): {\n    addMessageEventListener: AddMessageEventListener;\n    addMessage: AddMessage;\n    addCenterEventListener: AddCenterEventListener;\n    addCenterStatus: AddCenterStatus;\n    addZoomEventListener: AddZoomEventListener;\n    addZoom: AddZoom;\n  }\n}\nexport interface AppServiceInstanceI {\n  addMessageEventListener: AddMessageEventListener;\n  addMessage: AddMessage;\n  addCenterEventListener: AddCenterEventListener;\n  addCenterStatus: AddCenterStatus;\n  addZoomEventListener: AddZoomEventListener;\n  addZoom: AddZoom;\n}\ninterface AddCenterEventListener {\n  (listener: (center: number[]) => void, id: number): void\n}\nexport interface Center {\n  center: number[]\n  id: number\n}\ninterface AddCenterStatus {\n  (center: number[], id: number): void\n}\ninterface Zoom {\n  zoom: number\n  id: number\n}\ninterface AddZoomEventListener {\n  (listener: (zoom: number) => void, id: number): void\n}\ninterface AddZoom {\n  (zoom: number, id: number): void\n}\nconst appServiceId = 0\nconst initZoom = 10\nconst initCenter = [47.6, -122.3]\nconst isValid = (id: number, idB: number) => id !== idB\nconst AppService: AppServiceI = () => {\n  const messages$: Subject<Message> = new Subject()\n  const centers$: BehaviorSubject<Center> = new BehaviorSubject(\n    { center: initCenter, id: appServiceId },\n  )\n  const zooms$: BehaviorSubject<Zoom> = new BehaviorSubject(\n    { zoom: initZoom, id: appServiceId },\n  )\n  const addMessage: AddMessage = (message, id) => {\n    messages$.next({ message, id })\n  }\n  const addMessageEventListener: AddMessageEventListener = (listener, id) => {\n    const subArgs = [\n      (message: Message) => {\n        listener(message.message)\n      },\n      // eslint-disable-next-line no-console\n      console.log,\n      () => { // eslint-disable-next-line no-console\n        console.log('Completed: ', id)\n      }]\n    messages$.subscribe(...subArgs)\n  }\n  const addCenterEventListener: AddCenterEventListener = (listener, id) => {\n    centers$.subscribe((center: Center) => {\n      // do not send the center event to the caller\n      if (center.id !== id) {\n        listener(center.center)\n      }\n    },\n    // eslint-disable-next-line no-console\n    console.log,\n    () => {\n      // eslint-disable-next-line no-console\n      console.log('Completed: ', id)\n    })\n  }\n  const addCenterStatus: AddCenterStatus = (center, id) => {\n    centers$.next({ center, id })\n  }\n  const addZoomEventListener: AddZoomEventListener = (listener, id) => {\n    zooms$.subscribe((zoom: Zoom) => {\n      if (isValid(id, zoom.id)) {\n        listener(zoom.zoom)\n      }\n    })\n  }\n  const addZoom: AddZoom = (zoom, id) => zooms$.next({ zoom, id })\n  return {\n    addMessageEventListener,\n    addMessage,\n    addCenterEventListener,\n    addCenterStatus,\n    addZoomEventListener,\n    addZoom,\n  }\n}\n\nexport default AppService\n","\nexport default {\n  key: 'info',\n  text: 'Info',\n  // This needs an ariaLabel since it's icon-only\n  ariaLabel: 'Info',\n  iconOnly: true,\n  iconProps: { iconName: 'Info' },\n}\n","// commandItem onClickAction () => {}\n// add an onClick porrop to command Item\nconst infoWithAction = (infoCommandItem, setIsModalOpen) => {\n  Object.assign(\n    infoCommandItem,\n    {\n      onClick: () => setIsModalOpen(true),\n    },\n  )\n}\n\nexport default infoWithAction\n","import React, { useEffect, useState } from 'react'\nimport { CommandBar, initializeIcons } from '@fluentui/react'\nimport jss from 'jss'\nimport preset from 'jss-preset-default'\nimport style from '../style/main-style'\nimport GibsSelect from './GibsSelect'\nimport GibsMap from './GibsMap'\nimport InfoModal from './InfoModal'\nimport AppService, { AppServiceInstanceI } from '../app-service'\nimport gibsProducts, { getOLSourceOptions } from './Gibs'\nimport {\n  infoCommandItem,\n  infoWithAction,\n} from '../command-items'\n\ninitializeIcons()\njss.setup(preset())\nconst sheet = jss.createStyleSheet(style)\nsheet.attach()\nconst applicationService: AppServiceInstanceI = AppService()\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  infoWithAction(infoCommandItem, setIsModalOpen)\n  const intiGibsProduct: GibsNasa.Product = gibsProducts.multibandImagery[0]\n  const [gibsProduct, setGibsProduct] = useState<GibsNasa.Product>(intiGibsProduct)\n  const [gibsDate, setGibsDate] = useState<string>(intiGibsProduct.dateRange[0])\n  const [\n    sourceOptions,\n    setSourceOptions] = useState(getOLSourceOptions(gibsDate, intiGibsProduct.imageLayer))\n  useEffect(() => {\n    setSourceOptions(getOLSourceOptions(gibsDate, gibsProduct.imageLayer))\n  }, [gibsProduct, gibsDate])\n\n  return (\n    <>\n      <section className={sheet.classes.mainContainer}>\n        <GibsMap\n          id={10}\n          sourceOptions={sourceOptions}\n          appService={applicationService}\n        />\n        <div className=\"control-frame\">\n          <InfoModal\n            setIsModalOpen={setIsModalOpen}\n            isModalOpen={isModalOpen}\n          />\n          <GibsSelect\n            selectGibsProduct={(product, date) => {\n              setGibsDate(date)\n              setGibsProduct(product)\n            }}\n          />\n          <CommandBar\n            items={[infoCommandItem]}\n            ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n          />\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}